#include <stdio.h>  
#include <stdlib.h>  
#include <string.h>  
#include <sys/socket.h>  
#include <netinet/in.h>  
#include <arpa/inet.h>  

#define BUFFER_SIZE 1024  
#define WINDOW_SIZE 5  

int main() {  
 int server_fd, client_fd;  
 struct sockaddr_in server_addr, client_addr;  
 socklen_t client_len = sizeof(client_addr);  
 char buffer[BUFFER_SIZE];  
 int window_start = 0;  
 int window_end = WINDOW_SIZE - 1;  

 // Create socket  
 server_fd = socket(AF_INET, SOCK_STREAM, 0);  
 if (server_fd < 0) {  
 perror("socket creation failed");  
 exit(1);  
 }  

 // Set address and port number for the server  
 server_addr.sin_family = AF_INET;  
 server_addr.sin_port = htons(8080);  
 inet_pton(AF_INET, "127.0.0.1", &server_addr.sin_addr);  

 // Bind the socket to the address and port  
 if (bind(server_fd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {  
 perror("bind failed");  
 exit(1);  
 }  

 // Listen for incoming connections  
 if (listen(server_fd, 3) < 0) {  
 perror("listen failed");  
 exit(1);  
 }  

 printf("Server listening on port 8080...\n");  

 // Accept incoming connection  
 client_fd = accept(server_fd, (struct sockaddr *)&client_addr, &client_len);  
 if (client_fd < 0) {  
 perror("accept failed");  
 exit(1);  
 }  

 printf("Connection accepted from client IP address %s and port %d...\n",  
 inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port));  

 while (1) {  
 // Receive message from client  
 int bytes_received = recv(client_fd, buffer, BUFFER_SIZE, 0);  
 if (bytes_received < 0) {  
 perror("recv failed");  
 break;  
 }  

 // Process the received message  
 printf("Received message from client: %s\n", buffer);  

 // Send response back to client  
 char* response = "Hello from server!";  
 send(client_fd, response, strlen(response), 0);  

 // Update window  
 window_start = (window_start + 1) % WINDOW_SIZE;  
 window_end = (window_end + 1) % WINDOW_SIZE;  
 }  

 close(client_fd);  
 close(server_fd);  
 return 0;  
}