#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define PORT 8080
#define BUF_SIZE 1024

int main() {
    int sockfd;
    struct sockaddr_in servaddr, cliaddr;
    socklen_t len = sizeof(cliaddr);
    char buffer[BUF_SIZE];
    int expected_seq_num = 0;

    // Create socket
    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    // Fill server information
    memset(&servaddr, 0, sizeof(servaddr));
    memset(&cliaddr, 0, sizeof(cliaddr));

    servaddr.sin_family = AF_INET;
    servaddr.sin_addr.s_addr = INADDR_ANY;
    servaddr.sin_port = htons(PORT);

    // Bind the socket with the server address
    if (bind(sockfd, (const struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {
        perror("Bind failed");
        close(sockfd);
        exit(EXIT_FAILURE);
    }

    printf("Server is ready to receive data...\n");

    while (1) {
        // Receive the packet from the client
        int n = recvfrom(sockfd, (char *)buffer, BUF_SIZE, 0, (struct sockaddr *)&cliaddr, &len);
        buffer[n] = '\0';
        int received_seq_num = atoi(buffer);

        if (received_seq_num == expected_seq_num) {
            printf("Received expected packet with sequence number: %d\n", received_seq_num);
            sprintf(buffer, "%d", received_seq_num);
            sendto(sockfd, (const char *)buffer, strlen(buffer), 0, (const struct sockaddr *)&cliaddr, len);
            printf("ACK sent for packet with sequence number: %d\n", received_seq_num);  // New line added
            expected_seq_num++;
        } else {
            printf("Received out of order packet with sequence number: %d\n", received_seq_num);
            sprintf(buffer, "%d", expected_seq_num - 1);
            sendto(sockfd, (const char *)buffer, strlen(buffer), 0, (const struct sockaddr *)&cliaddr, len);
            printf("ACK sent for packet with sequence number: %d\n", expected_seq_num - 1);  // New line added
        }
    }

    close(sockfd);
    return 0;
}