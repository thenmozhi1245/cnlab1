#include <arpa/inet.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#define PORT 8080
#define MAXLINE 1024

// Function to perform modulo-2 division and compute the remainder
void compute_crc(char *message, char *generator, char *remainder) {
  int msg_len = strlen(message);
  int gen_len = strlen(generator);

  // Copy the message into the remainder
  strcpy(remainder, message);

  for (int i = 0; i <= msg_len - gen_len; i++) {
    // Perform XOR if the current bit is 1
    if (remainder[i] == '1') {
      for (int j = 0; j < gen_len; j++) {
        remainder[i + j] = (remainder[i + j] == generator[j]) ? '0' : '1';
      }
    }
  }
  // The remainder is now the last (gen_len - 1) bits of the remainder array
  memcpy(remainder, remainder + msg_len - gen_len + 1, gen_len - 1);
  remainder[gen_len - 1] = '\0';
}

int main() {
  int sockfd;
  char buffer[MAXLINE];
  struct sockaddr_in servaddr;

  // Generator polynomial (e.g., "1101" for CRC-3)
  char generator[] = "1101";
  int gen_len = strlen(generator);

  // Input binary message
  printf("Enter a binary message: ");
  scanf("%s", buffer);

  // Append zeros to the message
  int msg_len = strlen(buffer);
  for (int i = 0; i < gen_len - 1; i++) {
    buffer[msg_len + i] = '0';
  }
  buffer[msg_len + gen_len - 1] = '\0';

  // Compute the CRC remainder
  char remainder[gen_len];
  compute_crc(buffer, generator, remainder);

  // Display CRC remainder
  printf("CRC remainder: %s\n", remainder);

  // Append the remainder to the original message
  char message_with_crc[msg_len + gen_len];
  strncpy(message_with_crc, buffer, msg_len);
  strncat(message_with_crc, remainder, gen_len - 1);
  message_with_crc[msg_len + gen_len - 1] = '\0';
  printf("Message with CRC bits: %s\n", message_with_crc);

  // Create socket
  if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
    perror("Socket creation failed");
    exit(EXIT_FAILURE);
  }

  memset(&servaddr, 0, sizeof(servaddr));

  // Server address
  servaddr.sin_family = AF_INET;
  servaddr.sin_port = htons(PORT);
  servaddr.sin_addr.s_addr = INADDR_ANY;

  // Send binary message with CRC to server
  sendto(sockfd, message_with_crc, strlen(message_with_crc), MSG_CONFIRM,
         (const struct sockaddr *)&servaddr, sizeof(servaddr));
  printf("Binary message sent: %s\n", message_with_crc);

  close(sockfd);
  return 0;
}