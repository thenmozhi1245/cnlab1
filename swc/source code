#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define PORT 8080
#define BUF_SIZE 1024

int main() {
    int sockfd;
    struct sockaddr_in servaddr;
    socklen_t len = sizeof(servaddr);
    char buffer[BUF_SIZE];
    int window_size = 4;
    int base = 0;
    int next_seq_num = 0;
    int total_packets;

    // Take number of packets to be sent as input from the user
    printf("Enter the number of packets to be sent: ");
    scanf("%d", &total_packets);

    // Create socket
    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    // Fill server information
    memset(&servaddr, 0, sizeof(servaddr));

    servaddr.sin_family = AF_INET;
    servaddr.sin_port = htons(PORT);
    servaddr.sin_addr.s_addr = INADDR_ANY;

    while (base < total_packets) {
        // Send packets in the window
        while (next_seq_num < base + window_size && next_seq_num < total_packets) {
            sprintf(buffer, "%d", next_seq_num);
            sendto(sockfd, (const char *)buffer, strlen(buffer), 0, (const struct sockaddr *)&servaddr, len);
            printf("Sent packet with sequence number: %d\n", next_seq_num);
            next_seq_num++;
            sleep(1);  // Simulate network delay
        }

        // Receive ACK
        struct timeval tv;
        tv.tv_sec = 2;  // 2-second timeout
        tv.tv_usec = 0;
        setsockopt(sockfd, SOL_SOCKET, SO_RCVTIMEO, (const char *)&tv, sizeof(tv));

        int n = recvfrom(sockfd, (char *)buffer, BUF_SIZE, 0, (struct sockaddr *)&servaddr, &len);
        if (n > 0) {
            buffer[n] = '\0';
            int ack_seq_num = atoi(buffer);
            printf("Received ACK for sequence number: %d\n", ack_seq_num);
            base = ack_seq_num + 1;
        } else {
            printf("Timeout, resending packets...\n");
            next_seq_num = base;  // Resend packets starting from base
        }
    }

    close(sockfd);
    return 0;
}